#!/usr/bin/env python3
"""
    pycrack: An easy to use password cracking tool that don't rely on GPU.
    Copyright (C) 2022  lawliet666

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    pycrack   Copyright (C) 2022 lawliet666
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.
"""
__author__ = 'lawliet666'
__version__ = 1.0

from concurrent.futures import as_completed, ProcessPoolExecutor
import hashlib
import itertools
import sys
from time import perf_counter

start = perf_counter()

global secret
global wd
global wd_len
global workers

def md5(step):
    global wd, secret
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.md5(word.strip()).hexdigest() == secret:
                return word.decode()
    return None

def start_workers(slices):
    global workers
    with ProcessPoolExecutor(max_workers=workers) as executor:
        pool = [executor.submit(md5, step) for step in slices]
        for process in as_completed(pool):
            try:
                result = process.result()
            except:
                continue
            if result is not None:
                return result
        return None

def usage():
    print(f'{sys.argv[0]} [hash] [wordlist] [lenght] [workers]')    

def main():
    global secret, regex, wd, wd_len, workers
    if wd_len < 2:
        usage()
        sys.exit(2)
    print(f'Address Space: {wd_len} Workers: {workers}')
    steps  = [i for i in range( 0, wd_len, int(wd_len / workers))]
    steps[-1] = wd_len
    slices = [(steps[j], steps[j+1]) for j in range(len(steps)-1)]
    print('Running bruteforce ...')
    result = start_workers(slices)
    if result is not None:
        print(f'Found! {result}')
    stop = perf_counter()
    print(f'Finished in {round(stop-start, 2)} seconds')

if __name__ == '__main__':
    args = sys.argv[:]
    if len(args) != 5:
        print(len(args))
        print(args)
        usage()
        sys.exit(2)
    secret, wd, wd_len, workers = sys.argv[1], sys.argv[2], int(sys.argv[3]), int(sys.argv[4])
    main()
