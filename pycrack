#!/usr/bin/env python3
"""
    pycrack: An easy to use password cracking tool that don't rely on GPU.
    Copyright (C) 2022  lawliet666

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    pycrack   Copyright (C) 2022 lawliet666
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.
"""
__author__ = 'lawliet666'
__version__ = 1.0

from concurrent.futures import as_completed, ProcessPoolExecutor
import hashlib
import itertools
import sys
from time import perf_counter

start = perf_counter()

def blake2b(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.blake2b(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def blake2s(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.blake2s(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def md5(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.md5(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha1(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha1(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha224(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha1(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha256(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha256(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha384(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha384(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha3_224(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha3_224(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha3_256(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha3_256(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha3_384(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha3_384(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha3_512(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha3_512(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def sha512(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.sha512(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def shake_128(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.shake_128(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def shake_256(step, wd, secret):
    with open(wd, 'rb') as generator:
        words = itertools.islice(generator, step[0], step[1])
        for word in words:
            if hashlib.shake_256(word.strip()).hexdigest() == secret:
                return word.decode()
    return None


def start_workers(slices, workers, alg_method):
    with ProcessPoolExecutor(max_workers=workers) as executor:
        pool = [executor.submit(alg_method, step, wd, secret) for step in slices]
        for process in as_completed(pool):
            try:
                result = process.result()
            except:
                continue
            if result is not None:
                return result
    return None


def usage():
    print(f'{sys.argv[0]} [hash] [algorithm] [wordlist] [wordlist lenght] [cores]')    


def main(secret, algorithm, wd, wd_len, workers):
    algorithm = algorithm.strip().lower()
    algorithms = [
        'blake2b',
        'blake2s',
        'md5',
        'sha1',
        'sha224',
        'sha256',
        'sha384',
        'sha3_224',
        'sha3_256',
        'sha3_384',
        'sha3_512',
        'sha512',
        'shake_128'
        'shake_256'
    ]   
    if algorithm not in algorithms or wd_len < 2:
        usage()
        sys.exit(2)
    alg_method = eval(algorithm)
    print(f'Address Space: {wd_len} Workers: {workers}')
    starts = [i for i in range( 0, wd_len, int(wd_len / workers))][:-1]
    stops =  starts[1:]  + [wd_len]
    slices = (zip(starts, stops))
    print('Running bruteforce ...')
    result = start_workers(slices, workers, alg_method)
    if result is not None:
        print(f'Found! {result}')
    else:
        print('Address Space Exhausted')
    stop = perf_counter()
    print(f'Finished in {round(stop-start, 2)} seconds')


if __name__ == '__main__':
    args = sys.argv[:]
    if len(args) != 6:
        usage()
        sys.exit(2)
    secret = sys.argv[1]
    algorithm = sys.argv[2]
    wd = sys.argv[3]
    wd_len = int(sys.argv[4])
    workers = int(sys.argv[5])
    main(secret, algorithm, wd, wd_len, workers)

# We stay with Ukraine
